// Copyright 2019 Bull S.A.S. Atos Technologies - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-enum
// DO NOT EDIT!

package builder

import (
	"fmt"
	"strings"
)

const (
	// ActivityTypeDelegate is a ActivityType of type Delegate
	ActivityTypeDelegate ActivityType = iota
	// ActivityTypeSetState is a ActivityType of type Set-State
	ActivityTypeSetState
	// ActivityTypeCallOperation is a ActivityType of type Call-Operation
	ActivityTypeCallOperation
	// ActivityTypeInline is a ActivityType of type Inline
	ActivityTypeInline
)

const _ActivityTypeName = "delegateset-statecall-operationinline"

var _ActivityTypeMap = map[ActivityType]string{
	0: _ActivityTypeName[0:8],
	1: _ActivityTypeName[8:17],
	2: _ActivityTypeName[17:31],
	3: _ActivityTypeName[31:37],
}

func (i ActivityType) String() string {
	if str, ok := _ActivityTypeMap[i]; ok {
		return str
	}
	return fmt.Sprintf("ActivityType(%d)", i)
}

var _ActivityTypeValue = map[string]ActivityType{
	_ActivityTypeName[0:8]:                    0,
	strings.ToLower(_ActivityTypeName[0:8]):   0,
	_ActivityTypeName[8:17]:                   1,
	strings.ToLower(_ActivityTypeName[8:17]):  1,
	_ActivityTypeName[17:31]:                  2,
	strings.ToLower(_ActivityTypeName[17:31]): 2,
	_ActivityTypeName[31:37]:                  3,
	strings.ToLower(_ActivityTypeName[31:37]): 3,
}

// ParseActivityType attempts to convert a string to a ActivityType
func ParseActivityType(name string) (ActivityType, error) {
	if x, ok := _ActivityTypeValue[name]; ok {
		return ActivityType(x), nil
	}
	return ActivityType(0), fmt.Errorf("%s is not a valid ActivityType", name)
}
