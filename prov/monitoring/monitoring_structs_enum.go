// Copyright 2019 Bull S.A.S. Atos Technologies - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-enum
// DO NOT EDIT!

package monitoring

import (
	"fmt"
	"strings"
)

const (
	// CheckStatusINITIAL is a CheckStatus of type INITIAL
	CheckStatusINITIAL CheckStatus = iota
	// CheckStatusPASSING is a CheckStatus of type PASSING
	CheckStatusPASSING
	// CheckStatusCRITICAL is a CheckStatus of type CRITICAL
	CheckStatusCRITICAL
	// CheckStatusWARNING is a CheckStatus of type WARNING
	CheckStatusWARNING
)

const _CheckStatusName = "INITIALPASSINGCRITICALWARNING"

var _CheckStatusMap = map[CheckStatus]string{
	0: _CheckStatusName[0:7],
	1: _CheckStatusName[7:14],
	2: _CheckStatusName[14:22],
	3: _CheckStatusName[22:29],
}

func (i CheckStatus) String() string {
	if str, ok := _CheckStatusMap[i]; ok {
		return str
	}
	return fmt.Sprintf("CheckStatus(%d)", i)
}

var _CheckStatusValue = map[string]CheckStatus{
	_CheckStatusName[0:7]:                    0,
	strings.ToLower(_CheckStatusName[0:7]):   0,
	_CheckStatusName[7:14]:                   1,
	strings.ToLower(_CheckStatusName[7:14]):  1,
	_CheckStatusName[14:22]:                  2,
	strings.ToLower(_CheckStatusName[14:22]): 2,
	_CheckStatusName[22:29]:                  3,
	strings.ToLower(_CheckStatusName[22:29]): 3,
}

// ParseCheckStatus attempts to convert a string to a CheckStatus
func ParseCheckStatus(name string) (CheckStatus, error) {
	if x, ok := _CheckStatusValue[name]; ok {
		return CheckStatus(x), nil
	}
	return CheckStatus(0), fmt.Errorf("%s is not a valid CheckStatus", name)
}

const (
	// CheckTypeTCP is a CheckType of type TCP
	CheckTypeTCP CheckType = iota
	// CheckTypeHTTP is a CheckType of type HTTP
	CheckTypeHTTP
)

const _CheckTypeName = "TCPHTTP"

var _CheckTypeMap = map[CheckType]string{
	0: _CheckTypeName[0:3],
	1: _CheckTypeName[3:7],
}

func (i CheckType) String() string {
	if str, ok := _CheckTypeMap[i]; ok {
		return str
	}
	return fmt.Sprintf("CheckType(%d)", i)
}

var _CheckTypeValue = map[string]CheckType{
	_CheckTypeName[0:3]:                  0,
	strings.ToLower(_CheckTypeName[0:3]): 0,
	_CheckTypeName[3:7]:                  1,
	strings.ToLower(_CheckTypeName[3:7]): 1,
}

// ParseCheckType attempts to convert a string to a CheckType
func ParseCheckType(name string) (CheckType, error) {
	if x, ok := _CheckTypeValue[name]; ok {
		return CheckType(x), nil
	}
	return CheckType(0), fmt.Errorf("%s is not a valid CheckType", name)
}
